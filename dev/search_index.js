var documenterSearchIndex = {"docs":
[{"location":"layoutables_examples/#LSlider-1","page":"Layoutables Examples","title":"LSlider","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"A simple slider without a label. You can create a label using an LText object, for example. You need to specify a range that constrains the slider's possible values. You can then lift the value observable to make interactive plots.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nax = layout[1, 1] = LAxis(scene)\nsl1 = layout[2, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 3)\nsl2 = layout[3, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 5)\nsl3 = layout[4, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 7)\n\nsl4 = layout[:, 2] = LSlider(scene, range = 0:0.01:10, horizontal = false,\n    tellwidth = true, height = nothing, width = Auto())\n\nsave(\"example_lslider.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example lslider)","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"If you want to programmatically move the slider, use the function set_close_to!(ls::LSlider, value). Don't manipulate the value attribute directly, as there is no guarantee that this value exists in the range underlying the slider, and the slider's displayed value would not change anyway by changing the slider's output.","category":"page"},{"location":"layoutables_examples/#LText-1","page":"Layoutables Examples","title":"LText","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"This is just normal text, except it's also layoutable. A text's size is known, so rows and columns in a GridLayout can shrink to the appropriate width or height.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\naxs = layout[1:2, 1:3] = [LAxis(scene) for _ in 1:6]\n\nsupertitle = layout[0, :] = LText(scene, \"Six plots\", textsize = 30)\n\nsideinfo = layout[2:3, 0] = LText(scene, \"This text goes vertically\", rotation = pi/2)\n\nsave(\"example_ltext.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example ltext)","category":"page"},{"location":"layoutables_examples/#LButton-1","page":"Layoutables Examples","title":"LButton","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nlayout[1, 1] = LAxis(scene)\nlayout[2, 1] = buttongrid = GridLayout(tellwidth = false)\n\nbuttongrid[1, 1:5] = [LButton(scene, label = \"Button $i\") for i in 1:5]\n\nscene\n\nsave(\"example_lbutton.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example lbutton)","category":"page"},{"location":"layoutables_examples/#LRect-1","page":"Layoutables Examples","title":"LRect","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"A simple rectangle poly that is layoutable. This can be useful to make boxes for facet plots or when a rectangular placeholder is needed.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\nusing ColorSchemes\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nrects = layout[1:4, 1:6] = [LRect(scene, color = c) for c in get.(Ref(ColorSchemes.rainbow), (0:23) ./ 23)]\n\nsave(\"example_lrect.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example lrect)","category":"page"},{"location":"layoutables_examples/#LScene-1","page":"Layoutables Examples","title":"LScene","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"If you need a normal Makie scene in a layout, for example for 3D plots, you have to use LScene right now. It's just a wrapper around the normal Scene that makes it layoutable. The underlying Scene is accessible via the scene field. You can plot into the LScene directly, though.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"Currently you should pass a couple of attributes explicitly to make sure they are not inherited from the main scene (which has a pixel camera, e.g.).","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nlscene = layout[1, 1] = LScene(scene, camera = cam3d!, raw = false)\n\n# now you can plot into lscene like you're used to\nscatter!(lscene, randn(100, 3))","category":"page"},{"location":"layoutables_examples/#LToggle-1","page":"Layoutables Examples","title":"LToggle","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"A toggle with an attribute active that can either be true or false, to enable or disable properties of an interactive plot.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\ntoggles = [LToggle(scene, active = ac) for ac in [true, false]]\nlabels = [LText(scene, lift(x -> x ? \"active\" : \"inactive\", t.active))\n    for t in toggles]\n\nlayout[1, 2] = grid!(hcat(toggles, labels), tellheight = false)\n\nsave(\"example_ltoggle.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example ltoggle)","category":"page"},{"location":"layoutables_examples/#LMenu-1","page":"Layoutables Examples","title":"LMenu","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"A dropdown menu with options, where each element's label is determined with optionlabel(element) and the value with optionvalue(element). The attribute selection is set to the option value of an element when it is selected.","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nmenu = LMenu(scene, options = [\"viridis\", \"heat\", \"blues\"])\n\nfuncs = [sqrt, x->x^2, sin, cos]\n\nmenu2 = LMenu(scene, options = zip([\"Square Root\", \"Square\", \"Sine\", \"Cosine\"], funcs))\n\nlayout[1, 1] = vbox!(\n    LText(scene, \"Colormap\", width = nothing),\n    menu,\n    LText(scene, \"Function\", width = nothing),\n    menu2;\n    tellheight = false, width = 200)\n\nax = layout[1, 2] = LAxis(scene)\n\nfunc = Node{Any}(funcs[1])\n\nys = @lift($func.(0:0.3:10))\nscat = scatter!(ax, ys, markersize = 10px, color = ys)\n\ncb = layout[1, 3] = LColorbar(scene, scat, width = 30)\n\non(menu.selection) do s\n    scat.colormap = s\nend\n\non(menu2.selection) do s\n    func[] = s\n    autolimits!(ax)\nend\n\nmenu2.is_open = true\n\nsave(\"example_lmenu.svg\", scene); nothing # hide","category":"page"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"(Image: example lmenu)","category":"page"},{"location":"layoutables_examples/#Deleting-Layoutables-1","page":"Layoutables Examples","title":"Deleting Layoutables","text":"","category":"section"},{"location":"layoutables_examples/#","page":"Layoutables Examples","title":"Layoutables Examples","text":"To remove axes, colorbars and other layoutables from their layout and the scene, use delete!(layoutable).","category":"page"},{"location":"layoutables_reference/#LAxis-1","page":"Layoutables Reference","title":"LAxis","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LAxis","category":"page"},{"location":"layoutables_reference/#MakieLayout.LAxis","page":"Layoutables Reference","title":"MakieLayout.LAxis","text":"LAxis has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the axis in its parent GridLayout.\n\naspect\nDefault: nothing\nThe forced aspect ratio of the axis. nothing leaves the axis unconstrained, DataAspect() forces the same ratio as the ratio in data limits between x and y axis, AxisAspect(ratio) sets a manual ratio.\n\nautolimitaspect\nDefault: nothing\nConstrains the data aspect ratio (nothing leaves the ratio unconstrained).\n\nbackgroundcolor\nDefault: :white\nThe background color of the axis.\n\nbottomspinecolor\nDefault: :black\nThe color of the bottom axis spine.\n\nbottomspinevisible\nDefault: true\nControls if the bottom axis spine is visible.\n\nflip_ylabel\nDefault: false\nControls if the ylabel's rotation is flipped.\n\nhalign\nDefault: :center\nThe horizontal alignment of the axis within its suggested bounding box.\n\nheight\nDefault: nothing\nThe height of the axis.\n\nleftspinecolor\nDefault: :black\nThe color of the left axis spine.\n\nleftspinevisible\nDefault: true\nControls if the left axis spine is visible.\n\npanbutton\nDefault: AbstractPlotting.Mouse.right\nThe button for panning.\n\nrightspinecolor\nDefault: :black\nThe color of the right axis spine.\n\nrightspinevisible\nDefault: true\nControls if the right axis spine is visible.\n\nspinewidth\nDefault: 1.0\nThe width of the axis spines.\n\ntargetlimits\nDefault: BBox(0, 100, 0, 100)\nno description\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntitle\nDefault: \" \"\nThe axis title string.\n\ntitlealign\nDefault: :center\nThe horizontal alignment of the title.\n\ntitlefont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the title.\n\ntitlegap\nDefault: 10.0\nThe gap between axis and title.\n\ntitlesize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe title's font size.\n\ntitlevisible\nDefault: true\nControls if the title is visible.\n\ntopspinecolor\nDefault: :black\nThe color of the top axis spine.\n\ntopspinevisible\nDefault: true\nControls if the top axis spine is visible.\n\nvalign\nDefault: :center\nThe vertical alignment of the axis within its suggested bounding box.\n\nwidth\nDefault: nothing\nThe width of the axis.\n\nxautolimitmargin\nDefault: (0.05f0, 0.05f0)\nThe relative margins added to the autolimits in x direction.\n\nxaxisposition\nDefault: :bottom\nThe position of the x axis (:bottom or :top).\n\nxgridcolor\nDefault: RGBAf0(0, 0, 0, 0.1)\nThe color of the x grid lines.\n\nxgridstyle\nDefault: nothing\nThe linestyle of the x grid lines.\n\nxgridvisible\nDefault: true\nControls if the x grid lines are visible.\n\nxgridwidth\nDefault: 1.0\nThe width of the x grid lines.\n\nxlabel\nDefault: \" \"\nThe xlabel string.\n\nxlabelcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the xlabel.\n\nxlabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the xlabel.\n\nxlabelpadding\nDefault: 15.0\nThe padding between the xlabel and the ticks or axis.\n\nxlabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the xlabel.\n\nxlabelvisible\nDefault: true\nControls if the xlabel is visible.\n\nxpankey\nDefault: AbstractPlotting.Keyboard.x\nThe key for limiting panning to the x direction.\n\nxpanlock\nDefault: false\nLocks interactive panning in the x direction.\n\nxreversed\nDefault: false\nControls if the x axis goes rightwards (false) or leftwards (true)\n\nxtickalign\nDefault: 0.0\nThe alignment of the xtick marks relative to the axis spine (0 = out, 1 = in).\n\nxtickcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the xtick marks.\n\nxtickformat\nDefault: AbstractPlotting.automatic\nFormat for xticks.\n\nxticklabelalign\nDefault: (:center, :top)\nThe horizontal and vertical alignment of the xticklabels.\n\nxticklabelcolor\nDefault: RGBf0(0, 0, 0)\nThe color of xticklabels.\n\nxticklabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the xticklabels.\n\nxticklabelpad\nDefault: 5.0\nThe space between xticks and xticklabels.\n\nxticklabelrotation\nDefault: 0.0\nThe counterclockwise rotation of the xticklabels in radians.\n\nxticklabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the xticklabels.\n\nxticklabelspace\nDefault: AbstractPlotting.automatic\nThe space reserved for the xticklabels.\n\nxticklabelsvisible\nDefault: true\nControls if the xticklabels are visible.\n\nxticks\nDefault: AbstractPlotting.automatic\nThe xticks.\n\nxticksize\nDefault: 10.0\nThe size of the xtick marks.\n\nxticksvisible\nDefault: true\nControls if the xtick marks are visible.\n\nxtickwidth\nDefault: 1.0\nThe width of the xtick marks.\n\nxtrimspine\nDefault: false\nControls if the x spine is limited to the furthest tick marks or not.\n\nxzoomkey\nDefault: AbstractPlotting.Keyboard.x\nThe key for limiting zooming to the x direction.\n\nxzoomlock\nDefault: false\nLocks interactive zooming in the x direction.\n\nyautolimitmargin\nDefault: (0.05f0, 0.05f0)\nThe relative margins added to the autolimits in y direction.\n\nyaxisposition\nDefault: :left\nThe position of the y axis (:left or :right).\n\nygridcolor\nDefault: RGBAf0(0, 0, 0, 0.1)\nThe color of the y grid lines.\n\nygridstyle\nDefault: nothing\nThe linestyle of the y grid lines.\n\nygridvisible\nDefault: true\nControls if the y grid lines are visible.\n\nygridwidth\nDefault: 1.0\nThe width of the y grid lines.\n\nylabel\nDefault: \" \"\nThe ylabel string.\n\nylabelcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the ylabel.\n\nylabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the ylabel.\n\nylabelpadding\nDefault: 15.0\nThe padding between the ylabel and the ticks or axis.\n\nylabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the ylabel.\n\nylabelvisible\nDefault: true\nControls if the ylabel is visible.\n\nypankey\nDefault: AbstractPlotting.Keyboard.y\nThe key for limiting panning to the y direction.\n\nypanlock\nDefault: false\nLocks interactive panning in the y direction.\n\nyreversed\nDefault: false\nControls if the y axis goes upwards (false) or downwards (true)\n\nytickalign\nDefault: 0.0\nThe alignment of the ytick marks relative to the axis spine (0 = out, 1 = in).\n\nytickcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the ytick marks.\n\nytickformat\nDefault: AbstractPlotting.automatic\nFormat for yticks.\n\nyticklabelalign\nDefault: (:right, :center)\nThe horizontal and vertical alignment of the yticklabels.\n\nyticklabelcolor\nDefault: RGBf0(0, 0, 0)\nThe color of yticklabels.\n\nyticklabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the yticklabels.\n\nyticklabelpad\nDefault: 5.0\nThe space between yticks and yticklabels.\n\nyticklabelrotation\nDefault: 0.0\nThe counterclockwise rotation of the yticklabels in radians.\n\nyticklabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the yticklabels.\n\nyticklabelspace\nDefault: AbstractPlotting.automatic\nThe space reserved for the yticklabels.\n\nyticklabelsvisible\nDefault: true\nControls if the yticklabels are visible.\n\nyticks\nDefault: AbstractPlotting.automatic\nThe yticks.\n\nyticksize\nDefault: 10.0\nThe size of the ytick marks.\n\nyticksvisible\nDefault: true\nControls if the ytick marks are visible.\n\nytickwidth\nDefault: 1.0\nThe width of the ytick marks.\n\nytrimspine\nDefault: false\nControls if the y spine is limited to the furthest tick marks or not.\n\nyzoomkey\nDefault: AbstractPlotting.Keyboard.y\nThe key for limiting zooming to the y direction.\n\nyzoomlock\nDefault: false\nLocks interactive zooming in the y direction.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LLegend-1","page":"Layoutables Reference","title":"LLegend","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LLegend","category":"page"},{"location":"layoutables_reference/#MakieLayout.LLegend","page":"Layoutables Reference","title":"MakieLayout.LLegend","text":"LLegend has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the legend in its parent GridLayout.\n\nbgcolor\nDefault: :white\nThe background color of the legend.\n\ncolgap\nDefault: 20\nThe gap between the label of one legend entry and the patch of the next.\n\nframecolor\nDefault: :black\nThe color of the legend border.\n\nframevisible\nDefault: true\nControls if the legend border is visible.\n\nframewidth\nDefault: 1.0\nThe line width of the legend border.\n\ngridshalign\nDefault: :center\nThe horizontal alignment of entry groups in their parent GridLayout.\n\ngridsvalign\nDefault: :center\nThe vertical alignment of entry groups in their parent GridLayout.\n\ngroupgap\nDefault: 30\nThe gap between each group and the next.\n\nhalign\nDefault: :center\nThe horizontal alignment of the legend in its suggested bounding box.\n\nheight\nDefault: Auto()\nThe height setting of the legend.\n\nlabel\nDefault: \"undefined\"\nThe default entry label.\n\nlabelcolor\nDefault: :black\nThe color of the entry labels.\n\nlabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the entry labels.\n\nlabelhalign\nDefault: :left\nThe horizontal alignment of the entry labels.\n\nlabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the entry labels.\n\nlabelvalign\nDefault: :center\nThe vertical alignment of the entry labels.\n\nlinepoints\nDefault: [Point2f0(0, 0.5), Point2f0(1, 0.5)]\nThe default points used for LineElements in normalized coordinates relative to each label patch.\n\nlinewidth\nDefault: 3\nThe default line width used for LineElements.\n\nmargin\nDefault: (0.0f0, 0.0f0, 0.0f0, 0.0f0)\nThe additional space between the legend and its suggested boundingbox.\n\nmarkerpoints\nDefault: [Point2f0(0.5, 0.5)]\nThe default marker points used for MarkerElements in normalized coordinates relative to each label patch.\n\nmarkersize\nDefault: 12\nThe default marker size used for MarkerElements.\n\nmarkerstrokewidth\nDefault: 2\nThe default marker stroke width used for MarkerElements.\n\nnbanks\nDefault: 1\nThe number of banks in which the legend entries are grouped. Columns if the legend is vertically oriented, otherwise rows.\n\norientation\nDefault: :vertical\nThe orientation of the legend (:horizontal or :vertical).\n\npadding\nDefault: (10.0f0, 10.0f0, 10.0f0, 10.0f0)\nThe additional space between the legend content and the border.\n\npatchcolor\nDefault: :transparent\nThe color of the patches containing the legend markers.\n\npatchlabelgap\nDefault: 5\nThe gap between the patch and the label of each legend entry.\n\npatchsize\nDefault: (20.0f0, 20.0f0)\nThe size of the rectangles containing the legend markers.\n\npatchstrokecolor\nDefault: :transparent\nThe color of the border of the patches containing the legend markers.\n\npatchstrokewidth\nDefault: 1.0\nThe line width of the border of the patches containing the legend markers.\n\npolypoints\nDefault: [Point2f0(0, 0), Point2f0(1, 0), Point2f0(1, 1), Point2f0(0, 1)]\nThe default poly points used for PolyElements in normalized coordinates relative to each label patch.\n\npolystrokewidth\nDefault: 2\nThe default poly stroke width used for PolyElements.\n\nrowgap\nDefault: 4\nThe gap between the entry rows.\n\ntellheight\nDefault: false\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntitlefont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the legend group titles.\n\ntitlegap\nDefault: 15\nThe gap between each group title and its group.\n\ntitlehalign\nDefault: :center\nThe horizontal alignment of the legend group titles.\n\ntitleposition\nDefault: :top\nThe group title positions relative to their groups. Can be :top or :left.\n\ntitlesize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the legend group titles.\n\ntitlevalign\nDefault: :center\nThe vertical alignment of the legend group titles.\n\ntitlevisible\nDefault: true\nControls if the legend titles are visible.\n\nvalign\nDefault: :center\nThe vertical alignment of the legend in its suggested bounding box.\n\nwidth\nDefault: Auto()\nThe width setting of the legend.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LText-1","page":"Layoutables Reference","title":"LText","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LText","category":"page"},{"location":"layoutables_reference/#MakieLayout.LText","page":"Layoutables Reference","title":"MakieLayout.LText","text":"LText has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the text in its parent GridLayout.\n\ncolor\nDefault: RGBf0(0, 0, 0)\nThe color of the text.\n\nfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the text.\n\nhalign\nDefault: :center\nThe horizontal alignment of the text in its suggested boundingbox\n\nheight\nDefault: Auto()\nThe height setting of the text.\n\npadding\nDefault: (0.0f0, 0.0f0, 0.0f0, 0.0f0)\nThe extra space added to the sides of the text boundingbox.\n\nrotation\nDefault: 0.0\nThe counterclockwise rotation of the text in radians.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntext\nDefault: \"Text\"\nThe displayed text string.\n\ntextsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the text.\n\nvalign\nDefault: :center\nThe vertical alignment of the text in its suggested boundingbox\n\nvisible\nDefault: true\nControls if the text is visible.\n\nwidth\nDefault: Auto()\nThe width setting of the text.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LColorbar-1","page":"Layoutables Reference","title":"LColorbar","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LColorbar","category":"page"},{"location":"layoutables_reference/#MakieLayout.LColorbar","page":"Layoutables Reference","title":"MakieLayout.LColorbar","text":"LColorbar has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the colorbar in its parent GridLayout.\n\nbottomspinecolor\nDefault: RGBf0(0, 0, 0)\nThe color of the bottom spine.\n\nbottomspinevisible\nDefault: true\nControls if the bottom spine is visible.\n\ncolormap\nDefault: :viridis\nThe colormap that the colorbar uses.\n\nflip_vertical_label\nDefault: false\nFlips the colorbar label if the axis is vertical.\n\nflipaxisposition\nDefault: true\nFlips the axis to the right if vertical and to the top if horizontal.\n\nhalign\nDefault: :center\nThe horizontal alignment of the colorbar in its suggested bounding box.\n\nheight\nDefault: nothing\nThe height setting of the colorbar.\n\nlabel\nDefault: \" \"\nThe color bar label string.\n\nlabelcolor\nDefault: RGBf0(0, 0, 0)\nThe label color.\n\nlabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe label font family.\n\nlabelpadding\nDefault: 15.0\nThe gap between the label and the ticks.\n\nlabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe label font size.\n\nlabelvisible\nDefault: true\nControls if the label is visible.\n\nleftspinecolor\nDefault: RGBf0(0, 0, 0)\nThe color of the left spine.\n\nleftspinevisible\nDefault: true\nControls if the left spine is visible.\n\nlimits\nDefault: (0.0f0, 1.0f0)\nThe range of values depicted in the colorbar.\n\nnsteps\nDefault: 100\nThe number of steps in the heatmap underlying the colorbar gradient.\n\nrightspinecolor\nDefault: RGBf0(0, 0, 0)\nThe color of the right spine.\n\nrightspinevisible\nDefault: true\nControls if the right spine is visible.\n\nspinewidth\nDefault: 1.0\nThe line width of the spines.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntickalign\nDefault: 0.0\nThe alignment of the tick marks relative to the axis spine (0 = out, 1 = in).\n\ntickcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the tick marks.\n\ntickformat\nDefault: AbstractPlotting.automatic\nFormat for ticks.\n\nticklabelalign\nDefault: (:left, :center)\nThe horizontal and vertical alignment of the tick labels.\n\nticklabelcolor\nDefault: RGBf0(0, 0, 0)\nThe color of the tick labels.\n\nticklabelfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the tick labels.\n\nticklabelpad\nDefault: 5.0\nThe gap between tick labels and tick marks.\n\nticklabelsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the tick labels.\n\nticklabelspace\nDefault: AbstractPlotting.automatic\nThe space reserved for the tick labels.\n\nticklabelsvisible\nDefault: true\nControls if the tick labels are visible.\n\nticks\nDefault: AbstractPlotting.automatic\nThe ticks.\n\nticksize\nDefault: 10.0\nThe size of the tick marks.\n\nticksvisible\nDefault: true\nControls if the tick marks are visible.\n\ntickwidth\nDefault: 1.0\nThe line width of the tick marks.\n\ntopspinecolor\nDefault: RGBf0(0, 0, 0)\nThe color of the top spine.\n\ntopspinevisible\nDefault: true\nControls if the top spine is visible.\n\nvalign\nDefault: :center\nThe vertical alignment of the colorbar in its suggested bounding box.\n\nvertical\nDefault: true\nControls if the colorbar is oriented vertically.\n\nwidth\nDefault: nothing\nThe width setting of the colorbar.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LSlider-1","page":"Layoutables Reference","title":"LSlider","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LSlider","category":"page"},{"location":"layoutables_reference/#MakieLayout.LSlider","page":"Layoutables Reference","title":"MakieLayout.LSlider","text":"LSlider has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the slider in its parent GridLayout.\n\nbuttoncolor_inactive\nDefault: RGBf0(1, 1, 1)\nThe color of the button when it is not interacted with.\n\nbuttonradius\nDefault: 7.0\nThe radius of the slider button.\n\nbuttonstrokewidth\nDefault: 4.0\nThe line width of the slider button's border.\n\ncolor_active\nDefault: COLOR_ACCENT[]\nThe color of the slider when the mouse clicks and drags the slider.\n\ncolor_active_dimmed\nDefault: COLOR_ACCENT_DIMMED[]\nThe color of the slider when the mouse hovers over it.\n\ncolor_inactive\nDefault: RGBf0(0.9, 0.9, 0.9)\nThe color of the slider when it is not interacted with.\n\nhalign\nDefault: :center\nThe horizontal alignment of the slider in its suggested bounding box.\n\nheight\nDefault: Auto()\nThe height setting of the slider.\n\nhorizontal\nDefault: true\nControls if the slider has a horizontal orientation or not.\n\nlinewidth\nDefault: 4.0\nThe line width of the main slider line.\n\nrange\nDefault: 0:10\nThe range of values that the slider can pick from.\n\nstartvalue\nDefault: 0\nThe start value of the slider or the value that is closest in the slider range.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\nvalign\nDefault: :center\nThe vertical alignment of the slider in its suggested bounding box.\n\nvalue\nDefault: 0\nThe current value of the slider.\n\nwidth\nDefault: nothing\nThe width setting of the slider.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LButton-1","page":"Layoutables Reference","title":"LButton","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LButton","category":"page"},{"location":"layoutables_reference/#MakieLayout.LButton","page":"Layoutables Reference","title":"MakieLayout.LButton","text":"LButton has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the button in its parent GridLayout.\n\nbuttoncolor\nDefault: RGBf0(0.9, 0.9, 0.9)\nThe color of the button.\n\nbuttoncolor_active\nDefault: COLOR_ACCENT[]\nThe color of the button when the mouse clicks the button.\n\nbuttoncolor_hover\nDefault: COLOR_ACCENT_DIMMED[]\nThe color of the button when the mouse hovers over the button.\n\nclicks\nDefault: 0\nThe number of clicks that have been registered by the button.\n\ncornerradius\nDefault: 4\nThe radius of the rounded corners of the button.\n\ncornersegments\nDefault: 10\nThe number of poly segments used for each rounded corner.\n\nfont\nDefault: lift_parent_attribute(scene, :font, \"DejaVu Sans\")\nThe font family of the button label.\n\nhalign\nDefault: :center\nThe horizontal alignment of the button in its suggested boundingbox\n\nheight\nDefault: Auto()\nThe height setting of the button.\n\nlabel\nDefault: \"Button\"\nThe text of the button label.\n\nlabelcolor\nDefault: :black\nThe color of the label.\n\nlabelcolor_active\nDefault: :white\nThe color of the label when the mouse clicks the button.\n\nlabelcolor_hover\nDefault: :black\nThe color of the label when the mouse hovers over the button.\n\npadding\nDefault: (10.0f0, 10.0f0, 10.0f0, 10.0f0)\nThe extra space added to the sides of the button label's boundingbox.\n\nstrokecolor\nDefault: :transparent\nThe color of the button border.\n\nstrokewidth\nDefault: 2.0\nThe line width of the button border.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntextsize\nDefault: lift_parent_attribute(scene, :fontsize, 20.0f0)\nThe font size of the button label.\n\nvalign\nDefault: :center\nThe vertical alignment of the button in its suggested boundingbox\n\nwidth\nDefault: Auto()\nThe width setting of the button.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LToggle-1","page":"Layoutables Reference","title":"LToggle","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LToggle","category":"page"},{"location":"layoutables_reference/#MakieLayout.LToggle","page":"Layoutables Reference","title":"MakieLayout.LToggle","text":"LToggle has the following attributes:\n\nactive\nDefault: false\nIndicates if the toggle is active or not.\n\nalignmode\nDefault: Inside()\nThe align mode of the toggle in its parent GridLayout.\n\nbuttoncolor\nDefault: RGBf0(1, 1, 1)\nThe color of the toggle button.\n\ncornersegments\nDefault: 10\nThe number of poly segments in each rounded corner.\n\nframecolor_active\nDefault: COLOR_ACCENT[]\nThe color of the border when the toggle is active.\n\nframecolor_inactive\nDefault: RGBf0(0.9, 0.9, 0.9)\nThe color of the border when the toggle is inactive.\n\nhalign\nDefault: :center\nThe horizontal alignment of the toggle in its suggested bounding box.\n\nheight\nDefault: 30\nThe height of the toggle.\n\nrimfraction\nDefault: 0.25\nThe border width as a fraction of the toggle height \n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntoggleduration\nDefault: 0.2\nThe duration of the toggle animation.\n\nvalign\nDefault: :center\nThe vertical alignment of the toggle in its suggested bounding box.\n\nwidth\nDefault: 60\nThe width of the toggle.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LRect-1","page":"Layoutables Reference","title":"LRect","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LRect","category":"page"},{"location":"layoutables_reference/#MakieLayout.LRect","page":"Layoutables Reference","title":"MakieLayout.LRect","text":"LRect has the following attributes:\n\nalignmode\nDefault: Inside()\nThe align mode of the rectangle in its parent GridLayout.\n\ncolor\nDefault: RGBf0(0.9, 0.9, 0.9)\nThe color of the rectangle.\n\nhalign\nDefault: :center\nThe horizontal alignment of the rectangle in its suggested boundingbox\n\nheight\nDefault: nothing\nThe height setting of the rectangle.\n\npadding\nDefault: (0.0f0, 0.0f0, 0.0f0, 0.0f0)\nThe extra space added to the sides of the rectangle boundingbox.\n\nstrokecolor\nDefault: RGBf0(0, 0, 0)\nThe color of the border.\n\nstrokevisible\nDefault: true\nControls if the border of the rectangle is visible.\n\nstrokewidth\nDefault: 2.0\nThe line width of the rectangle's border.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\nvalign\nDefault: :center\nThe vertical alignment of the rectangle in its suggested boundingbox\n\nvisible\nDefault: true\nControls if the rectangle is visible.\n\nwidth\nDefault: nothing\nThe width setting of the rectangle.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LScene-1","page":"Layoutables Reference","title":"LScene","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LScene","category":"page"},{"location":"layoutables_reference/#MakieLayout.LScene","page":"Layoutables Reference","title":"MakieLayout.LScene","text":"LScene has the following attributes:\n\nalignmode\nDefault: Inside()\nThe alignment of the scene in its suggested bounding box.\n\nhalign\nDefault: :center\nThe horizontal alignment of the scene in its suggested bounding box.\n\nheight\nDefault: nothing\nThe height setting of the scene.\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\nvalign\nDefault: :center\nThe vertical alignment of the scene in its suggested bounding box.\n\nwidth\nDefault: nothing\nThe width setting of the scene.\n\n\n\n\n\n","category":"type"},{"location":"layoutables_reference/#LMenu-1","page":"Layoutables Reference","title":"LMenu","text":"","category":"section"},{"location":"layoutables_reference/#","page":"Layoutables Reference","title":"Layoutables Reference","text":"LMenu","category":"page"},{"location":"layoutables_reference/#MakieLayout.LMenu","page":"Layoutables Reference","title":"MakieLayout.LMenu","text":"LMenu(parent::Scene; bbox = nothing, kwargs...)\n\nCreate a drop-down menu with multiple selectable options. You can pass options with the keyword argument options. Options are given as an iterable of elements. For each element, the option label in the menu is determined with optionstring(element) and the option value with optionvalue(element). These functions can be overloaded for custom types. The default is that elements which are AbstractStrings are both label and value, and all other elements are expected to have two entries, where the first is the label and the second is the value.\n\nWhen an item is selected in the menu, the menu's selection attribute is set to optionvalue(selected_element).\n\nIf the menu is located close to the lower scene border, you can change its open direction to direction = :up.\n\nExample\n\nMenu with string entries:\n\nmenu1 = LMenu(scene, options = [\"first\", \"second\", \"third\"])\n\nMenu with two-element entries, label and function:\n\nfuncs = [sin, cos, tan]\nlabels = [\"Sine\", \"Cosine\", \"Tangens\"]\n\nmenu2 = LMenu(scene, options = zip(labels, funcs))\n\nLifting on the selection value:\n\non(menu2.selection) do func\n    # do something with the selected function\nend\n\nLMenu has the following attributes:\n\nalignmode\nDefault: Inside()\nThe alignment of the menu in its suggested bounding box.\n\ncell_color_active\nDefault: COLOR_ACCENT[]\nCell color when active\n\ncell_color_hover\nDefault: COLOR_ACCENT_DIMMED[]\nCell color when hovered\n\ncell_color_inactive_even\nDefault: RGBf0(0.97, 0.97, 0.97)\nCell color when inactive even\n\ncell_color_inactive_odd\nDefault: RGBf0(0.97, 0.97, 0.97)\nCell color when inactive odd\n\ndirection\nDefault: :down\nThe opening direction of the menu (:up or :down)\n\ndropdown_arrow_color\nDefault: (:black, 0.2)\nColor of the dropdown arrow\n\ndropdown_arrow_size\nDefault: 12px\nSize of the dropdown arrow\n\nhalign\nDefault: :center\nThe horizontal alignment of the menu in its suggested bounding box.\n\nheight\nDefault: Auto()\nThe height setting of the menu.\n\ni_selected\nDefault: 1\nIndex of selected item\n\nis_open\nDefault: false\nIs the menu showing the available options\n\noptions\nDefault: [\"no options\"]\nThe list of options selectable in the menu. This can be any iterable of a mixture of strings and containers with one string and one other value. If an entry is just a string, that string is both label and selection. If an entry is a container with one string and one other value, the string is the label and the other value is the selection.\n\nselection\nDefault: nothing\nSelected item value\n\nselection_cell_color_inactive\nDefault: RGBf0(0.94, 0.94, 0.94)\nSelection cell color when inactive\n\ntellheight\nDefault: true\nControls if the parent layout can adjust to this element's height\n\ntellwidth\nDefault: true\nControls if the parent layout can adjust to this element's width\n\ntextcolor\nDefault: :black\nColor of entry texts\n\ntextpadding\nDefault: (10, 10, 10, 10)\nPadding of entry texts\n\ntextsize\nDefault: 20\nFont size of the cell texts\n\nvalign\nDefault: :center\nThe vertical alignment of the menu in its suggested bounding box.\n\nwidth\nDefault: nothing\nThe width setting of the menu.\n\n\n\n\n\n","category":"type"},{"location":"theming/#Theming-1","page":"Theming Layoutables","title":"Theming","text":"","category":"section"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"Every layoutable object can be themed by adding attributes under a key with the same name as the layoutable (LAxis, LColorbar, etc.).","category":"page"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"Also, you can set default column and row gaps, as well as the font family and size used by almost all layoutables by default:","category":"page"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"set_theme!(\n    font = \"Arial\", # inherited by layoutables if not overridden\n    fontsize = 12, # inherited by layoutables if not overridden\n    rowgap = 10,\n    colgap = 20,\n)","category":"page"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"Here is an example of theming LAxis and LColorbar:","category":"page"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"using MakieLayout\nusing AbstractPlotting\n\nset_theme!(\n    LAxis = (topspinevisible = false, rightspinevisible = false,\n        xgridcolor = :blue, ygridcolor = :red),\n    LColorbar = (width = 20, height = Relative(0.5))\n)\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\ncb = layout[1, 2] = LColorbar(scene)\n\nset_theme!(Theme()) # hide\nsave(\"example_theming.svg\", scene); nothing # hide","category":"page"},{"location":"theming/#","page":"Theming Layoutables","title":"Theming Layoutables","text":"(Image: example theming)","category":"page"},{"location":"layouting/#How-layouting-works-1","page":"How Layouting Works","title":"How layouting works","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"The goal of MakieLayout is that all elements placed in a scene fit into the window, fill the available space, and are nicely aligned relative to each other. This works by using GridLayout objects that determine how wide their rows and columns should be given their content elements.","category":"page"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"Content elements have inner widths and heights, as well as four protrusions, that tell how far supporting content (like axis decorations) sticks out from the main part. The protrusions are meant to stick into the gaps between grid cells, and not every element has meaningful protrusions. They are mostly meant to allow for alignment of axes along their spines.","category":"page"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"Each element in a layout should have a couple of nodes that support the layout computations.","category":"page"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"Suggested bounding box\nComputed bounding box\nAuto-determined width and height\nComputed width and height\nProtrusions\nSize attributes\nAlignment attributes","category":"page"},{"location":"layouting/#Suggested-bounding-box-1","page":"How Layouting Works","title":"Suggested bounding box","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"This is the bounding box that is suggested to the element. Depending on the settings of the element, it can choose to align perfectly with this bounding box or, if its actual dimensions differ, how it should align inside that rectangle. A small LText can for example be aligned top-left inside a big available suggested bounding box.","category":"page"},{"location":"layouting/#Computed-bounding-box-1","page":"How Layouting Works","title":"Computed bounding box","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"This is the bounding box of the element after it has received a suggested bounding box and applied its own layout logic. This is the bounding box in which the elements main area will be in the scene.","category":"page"},{"location":"layouting/#Auto-determined-width-and-height-1","page":"How Layouting Works","title":"Auto-determined width and height","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"Some elements can compute their own size, depending on their settings. LText, for example, can compute the bounding box of its text. If an object has no specific content, like an LAxis, the auto-determined width or height will be nothing.","category":"page"},{"location":"layouting/#Computed-width-and-height-1","page":"How Layouting Works","title":"Computed width and height","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"The computed width and height is the size that the element reports to a GridLayout that it is a content element of. This can be different from the auto-size if the object doesn't want its parent layout to know its auto-size. This is useful if you don't want a column to shrink to the size of an LText, for example.","category":"page"},{"location":"layouting/#Protrusions-1","page":"How Layouting Works","title":"Protrusions","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"These are four values that tell the GridLayout how much gap space is needed by the element outside of the main element area. With an LAxis that would be the title at the top, y axis at the left side and x axis at the bottom in standard configuration.","category":"page"},{"location":"layouting/#Size-attributes-1","page":"How Layouting Works","title":"Size attributes","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"The user can specify height and width of an element in different ways, which interact with the suggested bounding box and the auto-determined size to compute the final size of the object and also control how the layout responds to the element's size (used here for either width or height, respectively).","category":"page"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"Fixed or Real: The size is always fixed, no matter what the layout suggests. A GridLayout can auto-adjust column sizes to this size.\nRelative: The size is a fraction of the suggested size. A GridLayout can not auto-adjust column sizes to this size.\nAuto: The size is equal to the auto-determined size if it's not nothing. A GridLayout can auto-adjust to this size if it's not nothing.\nnothing: The size is equal to the suggested size. A GridLayout can not auto-adjust column sizes to this size.","category":"page"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"For all sizes that a GridLayout can auto-adjust to, you can prohibit that by setting tellheight or tellwidth of the element to false.","category":"page"},{"location":"layouting/#Alignment-attributes-1","page":"How Layouting Works","title":"Alignment attributes","text":"","category":"section"},{"location":"layouting/#","page":"How Layouting Works","title":"How Layouting Works","text":"The user can specify how an element should be aligned relative to its suggested bounding box if it's not of the same size (in which case the alignment just has no effect on placement). Currently, these values can be :left, :right or :center for horizontal alignment and :top, :bottom and :center for vertical alignment.","category":"page"},{"location":"llegend/#Creating-a-legend-1","page":"LLegend","title":"Creating a legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.5:10\nys = sin.(xs)\nlin = lines!(ax, xs, ys, color = :blue)\nsca = scatter!(ax, xs, ys, color = :red, markersize = 15px)\n\nleg = LLegend(scene, [lin, sca, [lin, sca]], [\"a line\", \"some dots\", \"both together\"])\nlayout[1, 2] = leg\n\nsave(\"example_legend.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend)","category":"page"},{"location":"llegend/#Multi-bank-legend-1","page":"LLegend","title":"Multi-bank legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"You can control the number of banks with the nbanks attribute. Banks are columns when in vertical mode, and rows when in horizontal mode.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.1:10\nlins = [lines!(ax, xs, sin.(xs .+ 3v), color = RGBf0(v, 0, 1-v)) for v in 0:0.1:1]\n\nleg = LLegend(scene, lins, string.(1:length(lins)), nbanks = 3)\nlayout[1, 2] = leg\n\n\nsave(\"example_legend_ncols.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend ncols)","category":"page"},{"location":"llegend/#Legend-inside-an-axis-1","page":"LLegend","title":"Legend inside an axis","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"To place a legend inside an axis you can simply add it to the same layout slot that the axis lives in. As long as the axis is bigger than the legend you can set the legend's tellheight and tellwidth to false and position it using the align variables. You can use the margin keyword to keep the legend from touching the axis spines.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\n\nhaligns = [:left, :right, :center]\nvaligns = [:top, :bottom, :center]\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.1:10\nlins = [lines!(ax, xs, sin.(xs .* i), color = color)\n    for (i, color) in zip(1:3, [:red, :blue, :green])]\n\nlegends = [LLegend(\n        scene, lins, [\"Line $i\" for i in 1:3],\n        \"$ha & $va\",\n        tellheight = false,\n        tellwidth = false,\n        margin = (10, 10, 10, 10),\n        halign = ha, valign = va, orientation = :horizontal\n    ) for (j, ha, va) in zip(1:3, haligns, valigns)]\n\n\nfor leg in legends\n    layout[1, 1] = leg\nend\n\nsave(\"example_legend_alignment.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend alignment)","category":"page"},{"location":"llegend/#Creating-legend-entries-manually-1","page":"LLegend","title":"Creating legend entries manually","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"Sometimes you might want to construct legend entries from scratch to have maximum control. So far you can use LineElements, MarkerElements or PolyElements. Some attributes that can't have a meaningful preset and would usually be inherited from plot objects (like color) have to be explicitly specified. Others are inherited from the legend if they are not specified. These include marker arrangement for MarkerElements or poly shape for PolyElements. You can check the list using this function:","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nMakieLayout.attributenames(LegendEntry)","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\n\nelem_1 = [LineElement(color = :red, linestyle = nothing),\n          MarkerElement(color = :blue, marker = 'x', strokecolor = :black)]\n\nelem_2 = [PolyElement(color = :red, strokecolor = :blue),\n          LineElement(color = :black, linestyle = :dash)]\n\nelem_3 = LineElement(color = :green, linestyle = nothing,\n        linepoints = Point2f0[(0, 0), (0, 1), (1, 0), (1, 1)])\n\nelem_4 = MarkerElement(color = :blue, marker = 'π',\n        strokecolor = :transparent,\n        markerpoints = Point2f0[(0.2, 0.2), (0.5, 0.8), (0.8, 0.2)])\n\nelem_5 = PolyElement(color = :green, strokecolor = :black,\n        polypoints = Point2f0[(0, 0), (1, 0), (0, 1)])\n\n\nleg = layout[1, 2] = LLegend(scene,\n    [elem_1, elem_2, elem_3, elem_4, elem_5],\n    [\"Line & Marker\", \"Poly & Line\", \"Line\", \"Marker\", \"Poly\"],\n    patchsize = (35, 35))\n\nsave(\"example_legend_entries.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend entries)","category":"page"},{"location":"llegend/#Horizontal-legend-1","page":"LLegend","title":"Horizontal legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"In case you want the legend entries to be listed horizontally, set the orientation attribute to :horizontal. In this case the nbanks attribute refers to the number of rows instead of columns. To keep an adjacent axis from potentially shrinking to the width of the horizontal legend, set tellwidth = false and tellheight = true if you place the legend below or above the axis.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.5:10\nys = sin.(xs)\nlin = lines!(ax, xs, ys, color = :blue)\nsca = scatter!(ax, xs, ys, color = :red, markersize = 15px)\n\nleg = LLegend(scene, [lin, sca, lin], [\"a line\", \"some dots\", \"line again\"])\nlayout[1, 2] = leg\n\nleg_horizontal = LLegend(scene, [lin, sca, lin], [\"a line\", \"some dots\", \"line again\"],\n    orientation = :horizontal, tellwidth = false, tellheight = true)\nlayout[2, 1] = leg_horizontal\n\n\nsave(\"example_legend_horizontal.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend horizontal)","category":"page"},{"location":"llegend/#Multi-group-legends-1","page":"LLegend","title":"Multi-group legends","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"Sometimes a legend consists of multiple groups, for example in a plot where both marker size and color are varied and those properties need to be visualized separately, but still together in one legend. Each group's content is given as an array of elements and an array of labels, each within one collective array. You can shift the position of the titles relative to each group with the titleposition attribute, either :left or :top.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing AbstractPlotting\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nmarkersizes = [5, 10, 15, 20]\ncolors = [:red, :green, :blue, :orange]\n\nfor ms in markersizes, color in colors\n    scatter!(ax, randn(5, 2), markersize = ms * px, color = color)\nend\n\ngroup_size = [MarkerElement(marker = :circle, color = :black, strokecolor = :transparent,\n    markersize = ms * px) for ms in markersizes]\n\ngroup_color = [PolyElement(color = color, strokecolor = :transparent)\n    for color in colors]\n\nlegends = [LLegend(scene,\n    [group_size, group_color],\n    [string.(markersizes), string.(colors)],\n    [\"Size\", \"Color\"]) for _ in 1:6]\n\nlayout[1, 2:4] = legends[1:3]\nlayout[2:4, 1] = legends[4:6]\n\nfor l in legends[4:6]\n    l.orientation = :horizontal\n    l.tellheight = true\n    l.tellwidth = false\nend\n\nlegends[2].titleposition = :left\nlegends[5].titleposition = :left\n\nlegends[3].nbanks = 2\nlegends[5].nbanks = 2\nlegends[6].nbanks = 2\n\nscene\n\nsave(\"example_multilegend.svg\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example multilegend)","category":"page"},{"location":"grids/#Nesting-1","page":"GridLayout","title":"Nesting","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Grids can be nested inside other grids, and so on, to arbitrary depths. The top grid's parent should be the scene in which the layout is placed. When you place a grid inside another grid, that grid is automatically made its parent. Grids also are by default set to alignmode Inside which means that the content edges are aligned to the grid's bounding box, excluding the outer protrusions. This way, plots in nested grids are nicely aligned along their spines.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(30, resolution = (1200, 900))\n\nsubgl_left = GridLayout()\nsubgl_left[1:2, 1:2] = [LAxis(scene) for i in 1:2, j in 1:2]\n\nsubgl_right = GridLayout()\nsubgl_right[1:3, 1] = [LAxis(scene) for i in 1:3]\n\nlayout[1, 1] = subgl_left\nlayout[1, 2] = subgl_right\n\nsave(\"example_nested_grids.svg\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: example nested grids)","category":"page"},{"location":"grids/#Alignment-1","page":"GridLayout","title":"Alignment","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Here you can see the difference between the align modes Outside with and without margins and the Inside alignmode. Only the standard Inside mode aligns the axis spines of the contained axes nicely. The Outside mode is mostly useful for the main GridLayout so that there some space between the window edges and the plots. You can see that the normal axis looks the same as the one placed inside the grid with Inside alignment, and they are both effectively aligned exactly the same.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[2, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[3, 1] = LAxis(scene, title=\"No grid layout\")\n\nsubgl_1 = layout[1, 2] = GridLayout(alignmode=Inside())\nsubgl_2 = layout[2, 2] = GridLayout(alignmode=Outside())\nsubgl_3 = layout[3, 2] = GridLayout(alignmode=Outside(50))\n\nsubgl_1[1, 1] = LAxis(scene, title=\"Inside\")\nsubgl_2[1, 1] = LAxis(scene, title=\"Outside\")\nsubgl_3[1, 1] = LAxis(scene, title=\"Outside(50)\")\n\nlayout[1:3, 2] = [LRect(scene, color = :transparent, strokecolor = :red) for i in 1:3]\n\nsave(\"example_grid_alignment.svg\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: example grid alignment)","category":"page"},{"location":"grids/#Spanned-Placement-1","page":"GridLayout","title":"Spanned Placement","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Elements in a grid layout can span multiple rows and columns. You can specify them with the range syntax and colons for the full width or height. You can also use end to specify the last row or column.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(4, 4, 30, resolution = (1200, 1200))\n\nlayout[1, 1:2] = LAxis(scene, title=\"[1, 1:2]\")\nlayout[2:4, 1:2] = LAxis(scene, title=\"[2:4, 1:2]\")\nlayout[:, 3] = LAxis(scene, title=\"[:, 3]\")\nlayout[1:3, end] = LAxis(scene, title=\"[1:3, end]\")\nlayout[end, end] = LAxis(scene, title=\"[end, end]\")\n\nsave(\"example_spanned_grid_content.svg\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: spanned grid content)","category":"page"},{"location":"grids/#Auto-resizing-1","page":"GridLayout","title":"Auto-resizing","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"If you index outside of the current range of a grid layout, you do not get an error. Instead, the layout automatically resizes to contain the new indices. This is very useful if you want to iteratively build a layout, or add super or side titles.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene)\nfor i in 1:3\n    layout[:, end+1] = LAxis(scene)\n    layout[end+1, :] = LAxis(scene)\nend\n\nlayout[0, :] = LText(scene, text=\"Super Title\", textsize=50)\nlayout[end+1, :] = LText(scene, text=\"Sub Title\", textsize=50)\nlayout[2:end-1, 0] = LText(scene, text=\"Left Text\", textsize=50,\n    rotation=pi/2)\nlayout[2:end-1, end+1] = LText(scene, text=\"Right Text\", textsize=50,\n    rotation=-pi/2)\n\nsave(\"example_indexing_outside_grid.svg\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: indexing outside grid)","category":"page"},{"location":"grids/#Column-and-row-sizes-1","page":"GridLayout","title":"Column and row sizes","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"You can manipulate the sizes of rows and columns in a grid. The choices are between fixed widths in pixels, relative widths in fractions of one, aspect ratio widths that are relative to a selected row or column, and auto widths. Auto widths depend on the content of the row or column. Some elements like LText have a determinable width or height. If there are single-span elements in a row that have a determinable height and the row's height is set to auto, it will assume the largest height of all determinable elements it contains. This is very useful for placement of text, or other GUI elements like buttons and sliders. If a row or column does not have a determinable height or width, it defaults to an equal share of the remaining space with all other auto rows or columns. You can adjust the ratio of this share with the Integer argument of the Auto struct.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 6, 6,\n    colsizes = [Fixed(200), Relative(0.25), Auto(), Auto(), Auto(2), Auto()],\n    rowsizes = [Auto(), Fixed(100), Relative(0.25), Aspect(2, 1), Auto(), Auto()],\n    alignmode = Outside(30, 30, 30, 30))\n\n\nfor i in 2:6, j in 1:5\n    if i == 6 && j == 3\n        layout[i, j] = LText(scene, text=\"My Size is Inferred\")\n    else\n        layout[i, j] = LRect(scene)\n    end\nend\n\nfor (j, label) in enumerate([\"Fixed(200)\", \"Relative(0.25)\", \"Auto()\", \"Auto()\", \"Auto(2)\"])\n    layout[1, j] = LText(scene, tellwidth = false, text = label)\nend\n\nfor (i, label) in enumerate([\"Fixed(100)\", \"Relative(0.25)\", \"Aspect(2, 1)\", \"Auto()\", \"Auto()\"])\n    layout[i + 1, 6] = LText(scene, tellheight = false, text = label)\nend\n\nsave(\"example_row_col_sizes.svg\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: row col sizes)","category":"page"},{"location":"grids/#Trimming-empty-rows-and-columns-1","page":"GridLayout","title":"Trimming empty rows and columns","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"If you change a layout interactively and end up with unused rows or columns, trim! will remove those for you:","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(resolution = (600, 600))\n\nrecord(scene, \"example_trimming.mp4\", framerate=1) do io\n\n    ax1 = layout[1, 1] = LAxis(scene, title = \"Axis 1\")\n    recordframe!(io)\n\n    ax2 = layout[1, 2] = LAxis(scene, title = \"Axis 2\")\n    recordframe!(io)\n\n    layout[2, 1] = ax2\n    recordframe!(io)\n\n    trim!(layout)\n    recordframe!(io)\n\n    layout[2, 3:4] = ax1\n    recordframe!(io)\n\n    trim!(layout)\n    recordframe!(io)\nend\n\nnothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: hiding decorations)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"using AbstractPlotting\nusing AbstractPlotting: px\n\nset_theme!(\n    font = \"Noto Sans Light\",\n    LAxis = (\n        titlefont = \"Noto Sans Semibold\",\n    ),\n    LLegend = (\n        titlefont = \"Noto Sans Semibold\",\n    )\n)\n\n# replace the font paths with only the docs font folder\nempty!(AbstractPlotting.FreeTypeAbstraction.valid_fontpaths)\npush!(AbstractPlotting.FreeTypeAbstraction.valid_fontpaths, joinpath(@__DIR__, \"fonts\"))\nnothing","category":"page"},{"location":"#MakieLayout.jl-Tutorial-1","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"In this tutorial, we will see some of the capabilities of MakieLayout.jl while building a complex figure step by step. This is the final result we will create:","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_21)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"All right, let's get started!","category":"page"},{"location":"#Scene-and-Layout-1","page":"MakieLayout.jl Tutorial","title":"Scene and Layout","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"First, we import the necessary packages and then create the main scene and layout. The function layoutscene is a convenience function that creates a Scene which has a GridLayout attached to it that always fills the whole scene area. You can pass the outer padding of the top layout as the first argument.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"using MakieLayout\nusing CairoMakie; CairoMakie.activate!()\nusing Random # hide\nusing AbstractPlotting\nRandom.seed!(2) # hide\n\nouter_padding = 30\nscene, layout = layoutscene(outer_padding, resolution = (1200, 700),\n    backgroundcolor = RGBf0(0.98, 0.98, 0.98))\n\nsave(\"step_001.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_001)","category":"page"},{"location":"#First-LAxis-1","page":"MakieLayout.jl Tutorial","title":"First LAxis","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"The scene is completely empty, I have made the background light gray so it's easier to see. Now we add an LAxis. This is an axis or subplot type that MakieLayout defines which knows how to behave in a layout (which the Makie version doesn't).","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We create the axis and place it into the layout in one go. You place objects in a layout by using indexing syntax. You can save the axis in a variable by chaining the = expressions.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"ax1 = layout[1, 1] = LAxis(scene, title = \"Sine\")\n\nsave(\"step_002.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_002)","category":"page"},{"location":"#Plotting-into-an-LAxis-1","page":"MakieLayout.jl Tutorial","title":"Plotting into an LAxis","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We can plot into the axis with the ! versions of Makie's plotting functions. Contrary to Makie, these calls return the plot objects, not the Scene or LAxis, so it's easier to save them.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"xx = 0:0.2:4pi\nline1 = lines!(ax1, sin.(xx), xx, color = :red)\nscat1 = scatter!(ax1, sin.(xx) .+ 0.2 .* randn.(), xx,\n    color = (:red, 0.5), markersize = 15px, marker = '■')\n\nsave(\"step_003.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_003)","category":"page"},{"location":"#Multiple-Axes-1","page":"MakieLayout.jl Tutorial","title":"Multiple Axes","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"This looks nice already, but we want another axis with a cosine this time, to the right of the one we have. Currently our layout has one row and one cell, and only one LAxis inside of it:","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"layout","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We can extend the grid by indexing into new grid cells. Let's place a new axis next to the one we have, in row 1 and column 2.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"ax2 = layout[1, 2] = LAxis(scene, title = \"Shifted Cosine\")\n\nsave(\"step_004.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_004)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"As you can see, the first axis has shrunk to the left to make space for the new axis on the right. We can take another look at the layout to see how it has changed:","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"layout","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Let's plot into the new axis, the same way we did the scatter plots before.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"\nline2 = lines!(ax2, cos.(xx), pi .+ xx, color = :blue)\nscat2 = scatter!(ax2, cos.(xx) .+ 0.2 .* randn.(), pi .+ xx,\n    color = (:blue, 0.5), markersize = 15px, marker = '▲')\n\n\nsave(\"step_005.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_005)","category":"page"},{"location":"#Linking-Axes-1","page":"MakieLayout.jl Tutorial","title":"Linking Axes","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We want to make the left and right axes correspond to each other, so we can compare the plots more easily. To do that, we link both x and y axes. That will keep them synchronized.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"linkaxes!(ax1, ax2)\n\nsave(\"step_006.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_006)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"This looks good, but now both y-axes are the same, so we can hide the right one to make the plot less cluttered. We keep the grid lines, though. You can see that now that the y-axis is gone the two LAxes grow to fill the gap.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"hideydecorations!(ax2, grid = false)\n\nsave(\"step_007.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_007)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Even though our plots are entirely made up, we should follow best practice and label the axes. We can do this with the xlabel and ylabel attributes of the LAxis.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"ax1.xlabel = \"Amplitude\"\nax2.xlabel = \"Amplitude\"\nax1.ylabel = \"Time [ms]\"\n\nsave(\"step_007_2.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_007 2)","category":"page"},{"location":"#Adding-a-Legend-1","page":"MakieLayout.jl Tutorial","title":"Adding a Legend","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Let's add a legend to our plot that describes elements from both axes. We use LLegend for that. LLegend is a relatively complex object and there are many ways to create it, but here we'll keep it simple. We place the legend on the right again, in row 1 and column 3. Instead of specifying column three, we can also say end+1.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"leg = layout[1, end+1] = LLegend(scene,\n    [line1, scat1, line2, scat2],\n    [\"True\", \"Measured\", \"True\", \"Measured\"])\n\nsave(\"step_008.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_008)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"You can see one nice feature of MakieLayout here, which is that the legend takes much less horizontal space than the two axes. In fact, it takes exactly the space that it needs. This is possible because objects in MakieLayout can tell their width or height to their parent GridLayout, which can then shrink the row or column appropriately.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"One thing that could be better about this plot, is that the legend looks like it belongs only to the right axis, even though it describes elements from both axes. So let's move it in the middle below the two. This is easily possible in MakieLayout, without having to recreate the plot from scratch. We simply assign the legend to its new slot.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We want it in the second row, and spanning the first two columns.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"layout[2, 1:2] = leg\n\nsave(\"step_009.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_009)","category":"page"},{"location":"#Fixing-Spacing-Issues-1","page":"MakieLayout.jl Tutorial","title":"Fixing Spacing Issues","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"There are a couple of things wrong with this. The legend is where we want it, below the two axes. But it takes too much space vertically, and there is a large gap on the right.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Let's deal with the gap on the right first. It's the hole that was left by the legend, and it's even bigger now because it gets an equal share of space with the two axes, now that there is no legend shrinking the column width to its own size.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We can remove empty cells in a layout by calling trim! on it:","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"trim!(layout)\n\nsave(\"step_010.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_010)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"This is much better already! But the legend still takes too much space vertically. The reason for that is the default tellheight setting of the legend. It's set to false, which essentially means that it can compute its own height, but doesn't tell the layout about it. This makes sense for the most common situation where the legend sits on the right of an axis. We wouldn't want the axis to shrink to the height of the legend. But now that the legend has its own row, we do want this behavior. So we set the tellheight attribute to true.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"leg.tellheight = true\n\nsave(\"step_011.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_011)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Now the legend's row is shrunk to fit. One thing that we can do to improve the use of space is to change the legend's orientation to :horizontal.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"leg.orientation = :horizontal\n\nsave(\"step_012.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_012)","category":"page"},{"location":"#Sublayouts-1","page":"MakieLayout.jl Tutorial","title":"Sublayouts","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Let's add two new axes with heatmaps! We want them stacked on top of each other on the right side of the figure. We'll do the naive thing first, which is to place them in the first and second row of the third column. There are multiple versions of layout assignment syntax for convenience. Here, we create and assign two axes at once. The number of cells and objects has to match to do this.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"hm_axes = layout[1:2, 3] = [LAxis(scene, title = t) for t in [\"Low Activity\", \"High Activity\"]]\n\nheatmaps = [heatmap!(ax, i .+ rand(100, 100)) for (i, ax) in enumerate(hm_axes)]\n\nsave(\"step_013.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_013)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"This looks weird, the two axes do not have the same height. Rather, the lower one has the height of the legend in the same row. What can we do to remedy this situation?","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We have to recognize that what we want is not possible with one layout. We don't care about the heatmap axes being the same height as the other two axes and the legend, respectively. We only care that the top and the bottom of the two groups are aligned.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"There is usually more than one solution for any given layout problem. In other plotting software, people sometimes circumvent our current issue by dividing the layout into many more cells than there are content objects, and have the content span several rows or columns. For example the left axes span rows 1:10, the legend 10:12, while the heatmap axes span rows 1:6 and 7:12, respectively. This is complicated, not very flexible, and luckily unnecessary in MakieLayout.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We will instead help ourselves by using a nested GridLayout, just for the two heatmap axes. We move the axes into it by assigning them to their new slots. The detaching from the main layout happens automatically.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"hm_sublayout = GridLayout()\nlayout[1:2, 3] = hm_sublayout\n\n# there is another shortcut for filling a GridLayout vertically with\n# a vector of content\nhm_sublayout[:v] = hm_axes\n\nsave(\"step_014.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_014)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We don't care about the axis decorations, as it's often the case with image plots. The function hidedecorations! hides both x and y decorations at once. Also, the default autolimits are computed with a small margin, which doesn't look good in our case. We can set the autolimit margins to zero using tightlimits!.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"\ntightlimits!.(hm_axes)\nhidedecorations!.(hm_axes)\n\nsave(\"step_015.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_015)","category":"page"},{"location":"#Adding-a-Colorbar-1","page":"MakieLayout.jl Tutorial","title":"Adding a Colorbar","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Now, we also want to add a color bar for the two heatmaps. Right now, their colors are independently scaled from each other. We choose a scale that makes sense for both of them (in our case, we know data ranges only from 1 to 3) and assign that to both heatmaps. Then we create an LColorbar object with one of the heatmaps. This way, the color bar copies color range and color map from that heatmap.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We want to place the color bar to the right of the heatmaps, spanning the full height. We could either place it within the sublayout we just created, or in the main layout. Both versions can be made to look the same, but we'll choose the sublayout, because that is a more meaningful grouping, and we could move the whole assembly around later by moving only the sublayout.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We can place an object along all existing rows or columns using the : notation.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"for hm in heatmaps\n    hm.colorrange = (1, 3)\nend\n\ncbar = hm_sublayout[:, 2] = LColorbar(scene, heatmaps[1], label = \"Activity Level\")\n\nsave(\"step_016.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_016)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"The color bar is quite chunky because it takes 50% of the available width in the sublayout. Let's give it a fixed width of 30 units.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"cbar.width = 30\n\nsave(\"step_017.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_017)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Much better! Note that you can usually set all attributes during creation of an object (LColorbar(scene, width = 30)) or after the fact, like in this example.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Objects can also have a width or height relative to the space given to them by their parent GridLayout. If we feel that the colorbar is a bit too tall, we can shrink it to two thirds of the available height using Relative(2/3).","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"If you only specify a number like 30, it is interpreted as Fixed(30).","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"cbar.height = Relative(2/3)\n\nsave(\"step_18.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_18)","category":"page"},{"location":"#Adding-a-Title-1","page":"MakieLayout.jl Tutorial","title":"Adding a Title","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Now the plot could use a title! While other plotting packages sometimes have functions like supertitle, they often don't work quite right or force you to make manual adjustments. In MakieLayout, the LText object is much more flexible as it allows you to place text anywhere you want. We therefore create our super title not with a dedicated function but as a simple part of the whole layout.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"How can we place content in a row above row 1? This is easy in MakieLayout, as indexing outside of the current GridLayout cells works not only with higher numbers but also with lower numbers. Therefore, we can index into the zero-th row, which will create a new row and push all other content down.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"Note that after this, all the cell indices of our current content will have changed to reflect the new GridLayout size.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"supertitle = layout[0, :] = LText(scene, \"Plotting with MakieLayout\",\n    textsize = 30, font = \"Noto Sans Bold\", color = (:black, 0.25))\n\nsave(\"step_19.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_19)","category":"page"},{"location":"#Subplot-Labels-1","page":"MakieLayout.jl Tutorial","title":"Subplot Labels","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"In figures meant for publication, you often need to label subplots with letters or numbers. These can sometimes cause trouble because they overlap with other content, which has to be fixed after the fact in vector graphics software.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"This is not necessary in MakieLayout. Let's place letters in the upper left corners of the left group and the right group. To do that, we will make use of a property of layouts that we have used without mentioning it. When we place our letters, we want them to act similarly to the axis titles or labels. In MakieLayout, layoutable objects have an inner part, which is considered the \"important\" area that should align with other \"important\" inner areas. You can see that the three upper axes align with their top spines, and not their titles.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"All that is outside of the main area is part of the \"protrusions\". These help keeping the logic of the layout simple while allowing to easily align what is supposed to be aligned.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"So for our corner letters, we don't want to create new columns or rows. Doing that would probably cause alignment issues in most cases. Instead, we place these objects inside the protrusions of existing cells. That means they are part of the gaps between columns and rows, which is fitting for our labels.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"We can do this by specifying the Side as a third argument when indexing the layout. The default we have used so far is Inside(). For us, TopLeft() is the correct choice. (Remember that our previously first row is now the second row, due to the super title.)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"label_a = layout[2, 1, TopLeft()] = LText(scene, \"A\", textsize = 35,\n    font = \"Noto Sans Bold\", halign = :right)\nlabel_b = layout[2, 3, TopLeft()] = LText(scene, \"B\", textsize = 35,\n    font = \"Noto Sans Bold\", halign = :right)\n\nsave(\"step_20.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_20)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"That looks good! You can see that the letters, larger than the axis titles, have increased the gap between the title and the axes to fit them. In most other plotting software, you would probably have an overlap issue now.","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"One last thing we'll fix, is giving the labels a bit of padding at the bottom and the right, so they are not too close to the axes. The order of the padding values is (left, right, bottom, top).","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"label_a.padding = (0, 6, 16, 0)\nlabel_b.padding = (0, 6, 16, 0)\n\nsave(\"step_21.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"(Image: step_21)","category":"page"},{"location":"#","page":"MakieLayout.jl Tutorial","title":"MakieLayout.jl Tutorial","text":"And there we have it! Hopefully this tutorial has given you an overview how to approach the creation of a complex figure in MakieLayout. Check the rest of the documentation for more details and other dynamic parts like sliders and buttons!","category":"page"},{"location":"faq/#Elements-are-squashed-into-the-lower-left-corner-1","page":"Frequently Asked Questions","title":"Elements are squashed into the lower left corner","text":"","category":"section"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Layoutable elements require a bounding box that they align themselves to. If you place such an element in a layout, the bounding box is controlled by that layout. If you forget to put an element in a layout, it will have its default bounding box of BBox(0, 100, 0, 100) which ends up being in the lower left corner. You can also choose to specify a bounding box manually if you need more control.","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 1200))\n\nax1 = LAxis(scene, title = \"Squashed\")\nax2 = layout[1, 1] = LAxis(scene, title = \"Placed in Layout\")\nax3 = LAxis(scene, bbox = BBox(400, 800, 400, 800),\n  title = \"Placed at BBox(400, 800, 400, 800)\")\n\nsave(\"faq_squashed_element.svg\", scene); nothing # hide","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"(Image: squashed elements)","category":"page"},{"location":"faq/#Columns-or-rows-are-shrunk-to-the-size-of-Text-or-another-element-1","page":"Frequently Asked Questions","title":"Columns or rows are shrunk to the size of Text or another element","text":"","category":"section"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Columns or rows that have size Auto(true) try to determine the width or height of all single-spanned elements that are placed in them, and if any elements report their size the row or column will shrink to the maximum reported size. This is so smaller elements with a known size take as little space as needed. But if there is other content in the row that should take more space, you can give the offending element the attribute tellheight = false or tellwidth = false. This way, its own size can be determined automatically, but it doesn't report it to the row or column of the layout. Alternatively, you can set the size of that row or column to Auto(false) (or any other value than Auto(true)).","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene, title = \"Shrunk\")\nlayout[2, 1] = LAxis(scene, title = \"Expanded\")\nlayout[1, 2] = LText(scene, \"tellheight = true\", tellheight = true)\nlayout[2, 2] = LText(scene, \"tellheight = false\", tellheight = false)\n\nsave(\"faq_shrunk_row.svg\", scene); nothing # hide","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"(Image: shrunk row)","category":"page"},{"location":"laxis/#LAxis-1","page":"LAxis","title":"LAxis","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"This object represents a 2D axis that has many functions to make it more convenient to use with layouts. For a grid layout, the axis is a rectangle whose size is not yet determined, which has \"protrusions\" sticking out its sides. Those protrusions are the axis decorations like labels, ticks and titles. The protrusions only change if you change something about the axis attributes, but they stay the same when the layout is resized. Therefore, the main axis area will always be determined by the remaining space after the protrusions are subtracted.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"The axis interacts in two directions with the layout. When the size of one of its protrusions changes, this will notify its GridContent. This will then notify its parent GridLayout and so on, until the full layout is recomputed. When that's done, the LAxis object will have received a new bounding box with which it should align given its size and alignment attributes. This is now updated and the axis' subscene is adjusted to its new size. All axis decorations then also update their positions.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\nusing Animations\n\nscene, layout = layoutscene(resolution = (600, 600))\n\naxes = [LAxis(scene, xlabel = \"x label\", ylabel = \"y label\", title = \"title\")\n    for i in 1:2, j in 1:2]\nlayout[1:2, 1:2] = axes\n\na_title = Animation([0, 2], [20.0, 50.0], sineio(n=2, yoyo=true, prewait=0.2))\na_xlabel = Animation([2, 4], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\na_ylabel = Animation([4, 6], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\n\nrecord(scene, \"example_protrusion_changes.mp4\", 0:1/60:6, framerate = 60) do t\n\n    axes[1, 1].titlesize = a_title(t)\n    axes[1, 1].xlabelsize = a_xlabel(t)\n    axes[1, 1].ylabelsize = a_ylabel(t)\n\nend\n\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: protrusion changes)","category":"page"},{"location":"laxis/#Setting-axis-limits-and-reversing-axes-1","page":"LAxis","title":"Setting axis limits and reversing axes","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can set axis limits with the functions xlims!, ylims! or limits!. The numbers are meant in the order left right for xlims!, and bottom top for ylims!. Therefore, if the second number is smaller than the first, the respective axis will reverse. You can manually reverse an axis by setting ax.xreversed = true or ax.yreversed = true.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"Note that if you enforce an aspect ratio between x-axis and y-axis using autolimitaspect, the values you set with these functions will probably not be exactly what you get, but they will be changed to fit the chosen ratio.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\naxes = layout[] = [LAxis(scene) for i in 1:2, j in 1:3]\n\nxs = LinRange(0, 2pi, 50)\nfor (i, ax) in enumerate(axes)\n    ax.title = \"Axis $i\"\n    lines!(ax, xs, sin.(xs))\nend\n\nxlims!(axes[1], [0, 2pi]) # as vector\nxlims!(axes[2], 2pi, 0) # separate, reversed\nylims!(axes[3], -1, 1) # separate\nylims!(axes[4], (1, -1)) # as tuple, reversed\nlimits!(axes[5], 0, 2pi, -1, 1) # x1, x2, y1, y2\nlimits!(axes[6], BBox(0, 2pi, -1, 1)) # as rectangle\n\nsave(\"example_axis_limits.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: axis limits)","category":"page"},{"location":"laxis/#Modifying-ticks-1","page":"LAxis","title":"Modifying ticks","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"There are multiple ways to set or determine tick values and labels. Internally, first get_tickvalues(ticks, vmin, vmax) is called with the ax.xticks or ax.yticks attribute as ticks, and the limits of the respective axis as vmin and vmax. This function retrieves the numeric values of the ticks. To determine the actual strings being displayed, get_ticklabels(format, ticks, values) is then called where format is the content of the attribute ax.xtickformat or ax.ytickformat and values is the result of get_tickvalues.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"The most common use cases are predefined but custom tick finding behavior can be implemented by overloading get_tickvalues and get_ticklabels. Here are the signatures of the existing methods:","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"MakieLayout.get_tickvalues","category":"page"},{"location":"laxis/#MakieLayout.get_tickvalues","page":"LAxis","title":"MakieLayout.get_tickvalues","text":"get_tickvalues(::AbstractPlotting.Automatic, vmin, vmax)\n\nCalls the default tick finding algorithm, which could depend on the current LAxis state.\n\n\n\n\n\nget_tickvalues(lt::LinearTicks, vmin, vmax)\n\nRuns a common tick finding algorithm to as many ticks as requested by the LinearTicks instance.\n\n\n\n\n\nget_tickvalues(tup::Tuple{<:Any, <:Any}, vmin, vmax)\n\nCalls get_tickvalues(tup[1], vmin, vmax) where the first entry of the tuple should contain an iterable tick values and the second entry should contain an iterable of the respective labels.\n\n\n\n\n\nget_tickvalues(tickvalues, vmin, vmax)\n\nUses tickvalues directly.\n\n\n\n\n\n","category":"function"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"MakieLayout.get_ticklabels","category":"page"},{"location":"laxis/#MakieLayout.get_ticklabels","page":"LAxis","title":"MakieLayout.get_ticklabels","text":"get_ticklabels(formatter, ticks, values)\n\nForwards to get_ticklabels(formatter, values) if no specialization exists.\n\n\n\n\n\nget_ticklabels(::AbstractPlotting.Automatic, tup::Tuple{<:Any, <:Any}, values)\n\nReturns the second entry of tup, which should be an iterable of strings, as the tick labels for values.\n\n\n\n\n\nget_ticklabels(::AbstractPlotting.Automatic, values)\n\nGets tick labels by applying Showoff.showoff to values.\n\n\n\n\n\nget_ticklabels(formatfunction::Function, values)\n\nGets tick labels by applying formatfunction to values.\n\n\n\n\n\nget_ticklabels(formatstring::AbstractString, values)\n\nGets tick labels by formatting each value in values according to a Formatting.format format string.\n\n\n\n\n\n","category":"function"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\naxes = layout[] = [LAxis(scene) for i in 1:2, j in 1:2]\n\nxs = LinRange(0, 2pi, 50)\nfor (i, ax) in enumerate(axes)\n    ax.title = \"Axis $i\"\n    lines!(ax, xs, sin.(xs))\nend\n\naxes[1].xticks = 0:6\n\naxes[2].xticks = 0:pi:2pi\naxes[2].xtickformat = xs -> [\"$(x/pi)π\" for x in xs]\n\naxes[3].xticks = (0:pi:2pi, [\"start\", \"middle\", \"end\"])\n\naxes[4].xticks = 0:pi:2pi\naxes[4].xtickformat = \"{:.2f}ms\"\naxes[4].xlabel = \"Time\"\n\n\nsave(\"example_axis_ticks.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: axis ticks)","category":"page"},{"location":"laxis/#Hiding-axis-decorations-1","page":"LAxis","title":"Hiding axis decorations","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"Hiding axis decorations frees up the space for them in the layout if there are no other protrusions sticking into the same column or row gap that prevent enlarging the axis area. This makes it easy to achieve tight layouts that don't waste space. In this example, we set the column and row gaps to zero, so we can see the shrinking white space better.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\n\nscene = Scene(resolution = (600, 600), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 2, 2, # we need to specify rows and columns so the gap sizes don't get lost\n    addedcolgaps = Fixed(0),\n    addedrowgaps = Fixed(0),\n    alignmode = Outside(30))\n\naxes = [LAxis(scene, xlabel = \"x label\", ylabel = \"y label\", title = \"title\")\n    for j in 1:2, i in 1:2]\nlayout[1:2, 1:2] = axes\n\nrecord(scene, \"example_hiding_decorations.mp4\", framerate=3) do io\n\n    recordframe!(io)\n    for ax in axes\n        ax.titlevisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xlabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.ylabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.bottomspinevisible = false\n        ax.leftspinevisible = false\n        ax.topspinevisible = false\n        ax.rightspinevisible = false\n        recordframe!(io)\n    end\nend\n\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: hiding decorations)","category":"page"},{"location":"laxis/#Axis-aspect-ratios-1","page":"LAxis","title":"Axis aspect ratios","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"If you're plotting images, you might want to force a specific aspect ratio of an axis, so that the images are not stretched. The default is that an axis uses all of the available space in the layout. You can use AxisAspect and DataAspect to control the aspect ratio. For example, AxisAspect(1) forces a square axis and AxisAspect(2) results in a rectangle with a width of two times the height. DataAspect uses the currently chosen axis limits and brings the axes into the same aspect ratio. This is the easiest to use with images. A different aspect ratio can only reduce the axis space that is being used, also it necessarily has to break the layout a little bit.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\nusing FileIO\nusing Random # hide\nRandom.seed!(1) # hide\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\naxes = [LAxis(scene) for i in 1:2, j in 1:3]\ntightlimits!.(axes)\nlayout[1:2, 1:3] = axes\n\nimg = rotr90(load(\"cow.png\"))\n\nfor ax in axes\n    image!(ax, img)\nend\n\naxes[1, 1].title = \"Default\"\n\naxes[1, 2].title = \"DataAspect\"\naxes[1, 2].aspect = DataAspect()\n\naxes[1, 3].title = \"AxisAspect(418/348)\"\naxes[1, 3].aspect = AxisAspect(418/348)\n\naxes[2, 1].title = \"AxisAspect(1)\"\naxes[2, 1].aspect = AxisAspect(1)\n\naxes[2, 2].title = \"AxisAspect(2)\"\naxes[2, 2].aspect = AxisAspect(2)\n\naxes[2, 3].title = \"AxisAspect(0.5)\"\naxes[2, 3].aspect = AxisAspect(0.5)\n\nsave(\"example_axis_aspects.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: axis aspects)","category":"page"},{"location":"laxis/#Controlling-data-aspect-ratios-1","page":"LAxis","title":"Controlling data aspect ratios","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"If you want the content of an axis to adhere to a certain data aspect ratio, there is another way than forcing the aspect ratio of the whole axis to be the same, and possibly breaking the layout. This works via the axis attribute autolimitaspect. It can either be set to nothing which means the data limits can have any arbitrary aspect ratio. Or it can be set to a number, in which case the targeted limits of the axis (that are computed by autolimits!) are enlarged to have the correct aspect ratio.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can see the different ways to get a plot with an unstretched circle, using different ways of setting aspect ratios, in the following example.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing AbstractPlotting\nusing Animations\n\n# scene setup for animation\n\ncontainer_scene = Scene(camera = campixel!, resolution = (1200, 1200))\n\nt = Node(0.0)\n\na_width = Animation([1, 7], [1200.0, 800], sineio(n=2, yoyo=true, postwait=0.5))\na_height = Animation([2.5, 8.5], [1200.0, 800], sineio(n=2, yoyo=true, postwait=0.5))\n\nscene_area = lift(t) do t\n    IRect(0, 0, round(Int, a_width(t)), round(Int, a_height(t)))\nend\n\nscene = Scene(container_scene, scene_area, camera = campixel!)\n\nrect = poly!(scene, scene_area,\n    raw=true, color=RGBf0(0.97, 0.97, 0.97), strokecolor=:transparent, strokewidth=0)[end]\n\nouter_layout = GridLayout(scene, alignmode = Outside(30))\n\n\n\n# example begins here\n\nlayout = outer_layout[1, 1] = GridLayout()\n\ntitles = [\"aspect via layout\", \"axis aspect\", \"no aspect\", \"data aspect\"]\naxs = layout[1:2, 1:2] = [LAxis(scene, title = t) for t in titles]\n\nfor a in axs\n    lines!(a, Circle(Point2f0(0, 0), 100f0))\nend\n\nrowsize!(layout, 1, Fixed(400))\n# force the layout cell [1, 1] to be square\ncolsize!(layout, 1, Aspect(1, 1))\n\naxs[2].aspect = 1\naxs[4].autolimitaspect = 1\n\nrects = layout[1:2, 1:2] = [LRect(scene, color = (:black, 0.05),\n    strokecolor = :transparent) for _ in 1:4]\n\nrecord(container_scene, \"example_circle_aspect_ratios.mp4\", 0:1/60:9; framerate=60) do ti\n    t[] = ti\nend\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: example circle aspect ratios)","category":"page"},{"location":"laxis/#Linking-axes-1","page":"LAxis","title":"Linking axes","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can link axes to each other. Every axis simply keeps track of a list of other axes which it updates when it is changed itself. You can link x and y dimensions separately.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using AbstractPlotting\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 900))\n\nlayout[1, 1:3] = axs = [LAxis(scene) for i in 1:3]\nlinkxaxes!(axs[1:2]...)\nlinkyaxes!(axs[2:3]...)\n\naxs[1].title = \"x linked\"\naxs[2].title = \"x & y linked\"\naxs[3].title = \"y linked\"\n\nfor i in 1:3\n    lines!(axs[i], 1:10, 1:10, color = \"green\")\n    if i != 1\n        lines!(axs[i], 1:10, 11:20, color = \"blue\")\n    end\n    if i != 3\n        lines!(axs[i], 11:20, 1:10, color = \"red\")\n    end\nend\n\nsave(\"example_linked_axes.svg\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: linked axes)","category":"page"},{"location":"laxis/#Axis-interaction-1","page":"LAxis","title":"Axis interaction","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can zoom in an axis by scrolling and pan by right-clicking and dragging. The limits can be reset using ctrl + click. Alternatively, you can just call autolimits! on the axis.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"For some axes you might want to limit zooming and panning to one dimension or disable it completely. This can be achieved using the attributes xpanlock, ypanlock, xzoomlock and yzoomlock.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"# an LAxis that can only be zoomed and panned horizontally, for example for\n# temporal signals like audio\nax = LAxis(scene, ypanlock = true, yzoomlock = true)","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can also interactively limit zoom and pan directions by pressing and holding a button during zooming or panning. By default those buttons are x and y, respectively, but you can change them with the attributes xpankey, ypankey, xzoomkey and yzoomkey. Buttons can be found in AbstractPlotting.Keyboard, for example the x button is accessed as AbstractPlotting.Keyboard.x.","category":"page"}]
}
